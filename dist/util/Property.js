// Copyright Â© 2019 Brandon Li. All rights reserved.

// Minified distribution version - sim-core 0.0.0-dev.18 - MIT.
define(require=>{"use strict";const t=require("SIM_CORE/util/assert"),e=require("SIM_CORE/util/Util"),i=["string","number","boolean","function"];class s{constructor(s,l){l={type:null,validValues:null,isValidValue:null,...l},t(!l.type||i.includes(l.type)||!!l.type.constructor),t(!l.validValues||e.isArray(l.validValues)),t(!l.isValidValue||"function"==typeof l.isValidValue),this._value=s,this._initialValue=s,this._listeners=[],this._isDisposed=!1,this._type=l.type,this._validValues=l.validValues,this._isValidValue=l.isValidValue,this._validateValue(this._initialValue)}equals(e){return t(e instanceof s,`invalid other: ${e}`),this._equalsValue(this._value,e.value)}get(){return this._value}get value(){return this.get()}set(e){if(t(!this._isDisposed,"cannot set value of a disposed Property"),this._equalsValue(this.value,e))return;this._validateValue(e);const i=this.get();return this._value=e,this._listeners.forEach(t=>{t(this.get(),i)}),this}set value(t){this.set(t)}toggle(){return this.set(!this.get()),this}getInitialValue(){return this._initialValue}get initialValue(){return this.getInitialValue()}reset(){return this.set(this._initialValue)}link(t){return this.lazyLink(t),t(this.get()),this}lazyLink(e){return t(!this._isDisposed,"cannot link listener of a disposed Property"),t(!this.hasListener(e),`cannot link the same listener twice: ${e}`),this._listeners.push(e),this}unlink(i){return t(this.hasListener(i),`listener was never registered: ${i}`),e.arrayRemove(this._listeners,i),this}unlinkAll(){return this._listeners=[],this}hasListener(e){return t("function"==typeof e,`invalid listener: ${e}`),this._listeners.includes(e)}linkAttribute(e,i){t(Object.prototype.hasOwnProperty.call(e,i));const s=t=>{e[i]=t};return this.link(s),s}dispose(){return this.unlinkAll(),this._isDisposed=!0,this}_equalsValue(t,e){return t&&e&&t.constructor===e.constructor&&t.equals&&e.equals?t.equals(e):t===e}_validateValue(e){t(!this._type||(i.includes(this._type)?typeof e===this._type:e instanceof this._type),`value ${e} not of type ${this._type}`),t(!this._validValues||this._validValues.includes(e),`value ${e} not inside the valid values: ${this._validValues}`),t(!this.isValidValue||!0===this.isValidValue(e),`value ${e} did not pass isValidValue: ${this.isValidValue}`)}}return s});